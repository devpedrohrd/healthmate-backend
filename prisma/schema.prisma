generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  email     String   @unique @db.VarChar(50)
  password  String   @db.VarChar(100)
  phone     String   @db.VarChar(15)
  role      Role     @default(PATIENT)
  gender    Gender
  isActive  Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient      Patient?
  professional Professional?
}

enum Role {
  PROFESSIONAL
  PATIENT
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Patient {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  age       Int
  weight    Float?
  height    Float?
  bloodType String?   @db.VarChar(5)
  birthDate DateTime? @db.Date
  address   Json?     @db.Json

  user User @relation(fields: [userId], references: [id])

  professionals       Professional[]        @relation("PatientProfessionals")
  PatientProfessional PatientProfessional[]
}

model Professional {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  bio       String? @db.VarChar(500)
  image     String? @db.VarChar(100)
  specialty String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])

  patients            Patient[]             @relation("PatientProfessionals")
  PatientProfessional PatientProfessional[]
}

model PatientProfessional {
  patientId      Int
  professionalId Int

  patient      Patient      @relation(fields: [patientId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@id([patientId, professionalId])
}

model Medicament {
  id          Int              @id @default(autoincrement())
  userId      Int              @db.Integer
  name        String           @db.VarChar(50)
  description String?          @db.VarChar(500)
  image       String?          @db.VarChar(100)
  message     String?          @db.VarChar(255)
  quantity    Int              @default(0)
  dosage      String?          @db.VarChar(50)
  horary      DateTime         @db.Time
  status      MedicamentStatus @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  Reminder Reminder[]
}

enum MedicamentStatus {
  CONCLUDED
  ACTIVE
  CANCELED
}

model Reminder {
  id           Int            @id @default(autoincrement())
  medicamentId Int            @db.Integer
  time         DateTime       @db.Time
  title        String?        @db.VarChar(15)
  message      String?        @db.VarChar(255)
  status       ReminderStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  medicament Medicament @relation(fields: [medicamentId], references: [id])
}

enum ReminderStatus {
  CONCLUDED
  PENDING
  CANCELED
}

model AssessmentHealth {
  id           Int      @id @default(autoincrement())
  userId       Int      @db.Integer
  symptoms     String?  @db.VarChar(255)
  side_effects String?  @db.VarChar(255)
  observations String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
